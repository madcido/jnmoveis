{"version":3,"sources":["assets/slide1/slide1G.png","assets/logo/logoG.png","components/Header.jsx","components/Slider.jsx","data/slides/Slide1.jsx","data/index.js","App.jsx","serviceWorker.js","index.js","assets/wood/woodG.png"],"names":["module","exports","Header","styled","div","wood","Slider","width","height","slides","React","useEffect","id","setInterval","nextSlide","clearInterval","currentSlide","slideRef","current","addEventListener","register","calculate","removeEventListener","useRef","useState","slide","setSlide","length","previousSlide","touchPos","setTouchPos","e","touches","pageX","deltaX","changedTouches","SliderContainer","SliderContent","ref","PreviousButton","onClick","NextButton","total","Bullets","bullets","i","push","Bullet","key","active","BulletContainer","props","Button","Slide1","slide1","firstSlider","App","src","logo","alt","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,qaCGpC,IAAMC,EAASC,IAAOC,IAAV,IAIOC,K,ooCCJnB,IAAMC,EAAS,SAAC,GAIhB,IAAD,IAHJC,aAGI,MAHI,OAGJ,MAFJC,cAEI,MAFK,QAEL,MADJC,cACI,MADK,CAAC,aAAc,aACpB,EACJC,IAAMC,WAAU,WACd,IAAMC,EAAKC,YAAYC,EAAW,KAClC,OAAO,kBAAMC,cAAcH,OAG7BF,IAAMC,WAAU,WACd,IAAMK,EAAeC,EAASC,QAG9B,OAFAF,EAAaG,iBAAiB,aAAcC,GAC5CJ,EAAaG,iBAAiB,WAAYE,GACnC,WACLL,EAAaM,oBAAoB,aAAcF,GAC/CJ,EAAaM,oBAAoB,WAAYD,OAIjD,IAAMJ,EAAWP,IAAMa,SAhBnB,EAkBsBb,IAAMc,SAAS,GAlBrC,mBAkBGC,EAlBH,KAkBUC,EAlBV,KAoBEZ,EAAY,WACZW,IAAUhB,EAAOkB,OAAS,EAC5BD,EAAS,GAETA,EAASD,EAAQ,IAIfG,EAAgB,WAElBF,EADY,IAAVD,EACOhB,EAAOkB,OAAS,EAEhBF,EAAQ,IAhCjB,EAoC4Bf,IAAMc,SAAS,GApC3C,mBAoCGK,EApCH,KAoCaC,EApCb,KAsCEV,EAAW,SAACW,GAChBD,EAAYC,EAAEC,QAAQ,GAAGC,QAGrBZ,EAAY,SAACU,GACjB,IAAMG,EAASH,EAAEI,eAAe,GAAGF,MAAQJ,EAEvCK,EAAS,GACXpB,IAGEoB,EAAS,GACXN,KAIJ,OACE,kBAACQ,EAAD,CAAiB7B,MAAOA,EAAOC,OAAQA,GACrC,kBAAC6B,EAAD,CAAeC,IAAKrB,GAAWR,EAAOgB,IACtC,kBAACc,EAAD,CAAgBC,QAASZ,IACzB,kBAACa,EAAD,CAAYD,QAAS1B,IACrB,kBAAC,EAAD,CAAS4B,MAAOjC,EAAOkB,OAAQT,QAASO,MAKxCkB,EAAU,SAAC,GAEf,IAFuC,IAAtBD,EAAqB,EAArBA,MAAOxB,EAAc,EAAdA,QAClB0B,EAAU,GACPC,EAAI,EAAGA,EAAIH,EAAOG,IACzBD,EAAQE,KAAK,kBAACC,EAAD,CAAQC,IAAKH,EAAGI,OAAQJ,IAAM3B,KAG7C,OAAO,kBAACgC,EAAD,KAAkBN,IAGrBR,EAAkBjC,IAAOC,IAAV,KACV,SAAC+C,GAAD,OAAWA,EAAM5C,SAChB,SAAC4C,GAAD,OAAWA,EAAM3C,UAOvB6B,EAAgBlC,IAAOC,IAAV,KAKbgD,EAASjD,IAAOC,IAAV,KAcNmC,EAAiBpC,YAAOiD,EAAPjD,CAAH,KAIdsC,EAAatC,YAAOiD,EAAPjD,CAAH,KAIV4C,EAAS5C,IAAOC,IAAV,KAKU,SAAC+C,GAAD,OAAYA,EAAMF,OAAS,UAAY,aAGvDC,EAAkB/C,IAAOC,IAAV,K,oOCzHd,IAAMiD,EAASlD,IAAOC,IAAV,IAGSkD,KCHfC,EAAc,CAAC,kBAACF,EAAD,MAAY,oBAAkB,c,iBCc3CG,MAXf,WACE,OACE,oCACE,kBAACtD,EAAD,KACE,yBAAKuD,IAAKC,IAAMC,IAAI,UAEtB,kBAAC,EAAD,CAAQpD,MAAM,OAAOC,OAAO,QAAQC,OAAQmD,MCA9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BhF,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.d3132266.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slide1G.ceea3e3e.png\";","module.exports = __webpack_public_path__ + \"static/media/logoG.2ee3eba6.png\";","import styled from \"styled-components\";\nimport wood from \"../assets/wood/woodG.png\";\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-image: url(${wood});\n\n  img {\n      width: 85px;\n      height: 85px;\n      margin: 5px 0;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Slider = ({\n  width = \"100%\",\n  height = \"100px\",\n  slides = [\"eeeta pora\", \"mas q blz\"],\n}) => {\n  React.useEffect(() => {\n    const id = setInterval(nextSlide, 8000);\n    return () => clearInterval(id);\n  });\n\n  React.useEffect(() => {\n    const currentSlide = slideRef.current;\n    currentSlide.addEventListener(\"touchstart\", register);\n    currentSlide.addEventListener(\"touchend\", calculate);\n    return () => {\n      currentSlide.removeEventListener(\"touchstart\", register);\n      currentSlide.removeEventListener(\"touchend\", calculate);\n    };\n  });\n\n  const slideRef = React.useRef();\n\n  const [slide, setSlide] = React.useState(0);\n\n  const nextSlide = () => {\n    if (slide === slides.length - 1) {\n      setSlide(0);\n    } else {\n      setSlide(slide + 1);\n    }\n  };\n\n  const previousSlide = () => {\n    if (slide === 0) {\n      setSlide(slides.length - 1);\n    } else {\n      setSlide(slide - 1);\n    }\n  };\n\n  const [touchPos, setTouchPos] = React.useState(0);\n\n  const register = (e) => {\n    setTouchPos(e.touches[0].pageX);\n  };\n\n  const calculate = (e) => {\n    const deltaX = e.changedTouches[0].pageX - touchPos;\n\n    if (deltaX < 0) {\n      nextSlide();\n    }\n\n    if (deltaX > 0) {\n      previousSlide();\n    }\n  };\n\n  return (\n    <SliderContainer width={width} height={height}>\n      <SliderContent ref={slideRef}>{slides[slide]}</SliderContent>\n      <PreviousButton onClick={previousSlide} />\n      <NextButton onClick={nextSlide} />\n      <Bullets total={slides.length} current={slide} />\n    </SliderContainer>\n  );\n};\n\nconst Bullets = ({ total, current }) => {\n  const bullets = [];\n  for (let i = 0; i < total; i++) {\n    bullets.push(<Bullet key={i} active={i === current} />);\n  }\n\n  return <BulletContainer>{bullets}</BulletContainer>;\n};\n\nconst SliderContainer = styled.div`\n  width: ${(props) => props.width};\n  height: ${(props) => props.height};\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SliderContent = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Button = styled.div`\n  display: none;\n  @media (min-width: 787px) {\n    display: block;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 30px;\n    height: 30px;\n    background-color: green;\n    cursor: pointer;\n  }\n`;\n\nconst PreviousButton = styled(Button)`\n  left: 30px;\n`;\n\nconst NextButton = styled(Button)`\n  right: 30px;\n`;\n\nconst Bullet = styled.div`\n  width: 10px;\n  height: 10px;\n  margin: 8px;\n  border-radius: 50%;\n  background-color: ${(props) => (props.active ? \"#545456\" : \"#7f7f82\")};\n`;\n\nconst BulletContainer = styled.div`\n  position: absolute;\n  bottom: 15px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  align-items: center;\n`;\n","import styled from 'styled-components';\nimport slide1 from '../../assets/slide1/slide1G.png';\n\nexport const Slide1 = styled.div`\n    width: 100%;\n    height: 100%;\n    background-image: url(${slide1});\n    background-size: cover;\n    background-position: center center;\n`;","import React from \"react\";\nimport { Slide1 } from \"./slides/Slide1\";\n\nexport const firstSlider = [<Slide1 />, \"mim d√° mais um\", \"q beleeeza\"];\n\nexport const secondSlider = [];\n\nexport const thirdSlider = [];\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Slider } from \"./components/Slider\";\nimport * as data from \"./data\";\nimport logo from \"./assets/logo/logoG.png\";\n\nfunction App() {\n  return (\n    <>\n      <Header>\n        <img src={logo} alt=\"logo\" />\n      </Header>\n      <Slider width=\"100%\" height=\"400px\" slides={data.firstSlider} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/woodG.9a6ab95d.png\";"],"sourceRoot":""}